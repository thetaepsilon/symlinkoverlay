#!/bin/sh

progname="symlinkoverlay";
if test $# -lt 3; then {
	echo "Usage: $progname sourcelinkdir configdir targetdir <options>..." >&2;
	exit 1;
}; fi;
opt_sourcelinkdir="$1";
opt_configdir="$2";
opt_targetdir="$3";
shift 3;

log() {
	local loglevel="$1"; shift;
	echo "[$progname] [$loglevel]" "$@" >&2;
}
fatal() {
	log fatal "$@";
	exit 2;
}

helpdesc() {
	echo "help: displays this help";
	echo "clean: removes *all* files and dotfiles recursively from the gen directory before starting";
	printf "\trecommended but please ensure the target directory is empty;\n";
	printf "\tany existing files should have items created for them in the config dir.\n";
	exit 0;
}

for opt in "$@"; do {
	case "$opt" in
	"help") 	helpdesc;;
	"clean")	cleanmode=1;;
	esac
}; done;



validateopts() {
	test -d "$opt_sourcelinkdir" || return 1;
	test -d "$opt_configdir" || return 1;
	test -d "$opt_targetdir" || return 1;
}

# UNFINISHED just debugging
tryln() {
	log trace "creating symlink: " "$2" "points to" "$1";
	ln -s "$1" "$2" || fatal "unable to create symlink!";
}

handleclean() {
	if test -n "$cleanmode"; then {
		log warning "cleaning target dir requested, stub!"
	}; fi;
}

tryread() {
	local path="$1";
	local target="$2";
	local result;
	log trace "tryread() requested for " "$path";
	result=$(cat "$path") || fatal "unable to read config data file $1";
	eval "$target=$result";
}

trytouch() {
	local path="$1";
	log trace "creating blank file at ${path}";
	touch "$path" || fatal "unable to create blank file at $path";
}

trymkdirdup() {
	mkdir -p "$1" || fatal "unable to create directory at $path";
}

trymkdir() {
	mkdir "$1" || fatal "unable to create directory at $path";
}

# some constant path names that will be referenced a lot below.
pathname_prefix=".linkfarm.";
pathname_sourcelinks="${pathname_prefix}source"
pathname_ignore="${pathname_prefix}ignore";
pathname_autosource="${pathname_prefix}autosource";

# creates the top-level source links needed below
createmasterlinks() {
	log trace "-- createmasterlinks() entry";
	local sourcelinkdir="$1";
	local targetdir="$2";
	log trace "-- source link dir is ${sourcelinkdir}";
	log trace "-- target output dir is ${targetdir}";
	local linkoutput="${targetdir}/${pathname_sourcelinks}";
	trymkdir "${linkoutput}";
	log trace "-- link output directory is ${linkoutput}";
	ls -1U "${sourcelinkdir}" | (
		IFS='
';
		while read -r sourcename; do {
			local linkfile="${linkoutput}/${sourcename}";
			log trace "setting up source $sourcename as ${linkfile}";
			tryread "${sourcelinkdir}/${sourcename}" sourcepath;
			tryln "${sourcepath}" "${linkfile}";
		}; done;
	) || exit $?;
	# exit $? is needed to propogate fatal() out of the subshell.
	log trace "-- createmasterlinks() complete";
}

# check if a source label is valid by checking for the links as created above
checksource() {
	local targetpath="$1";
	local sourcename="$2";
	test -h "${targetpath}/${pathname_sourcelinks}/${sourcename}";
	local result=$?;
	if test "$result" -eq 0; then {
		log trace "source label ${sourcename} checked successfully";
	}; else {
		log error "source link for ${sourcename} does not exist!";
	}; fi;
	return $result;
}

# assumes the top-level source directory links have already been set up
handledir() {	
	local configdir="$1";
	local targetdir="$2";
	local pathrel="$3";
	local symlinkrel="$4";

	log trace "-- handledir() entry"
	log trace "-- configdir is ${configdir}";
	log trace "-- targetdir is ${targetdir}";
	log trace "-- pathrel is now \"${pathrel}\"";
	log trace "-- symlinkrel is now \"${symlinkrel}\"";

	local currentconfig="${configdir}/${pathrel}";
	local currenttarget="${targetdir}/${pathrel}";
	ls -1aU "${currentconfig}" | (
		IFS='
';
		while read -r entryname; do {
			# make sure not to accidentally handle reserved entries or . or ..
			case "$entryname" in
			.)	continue;;
			..)	continue;;
			${pathname_prefix}*)
				continue;;
			esac

			log trace "handling entry ${entryname} under path ${pathrel}";
			local currententry="${currentconfig}/${entryname}";

			# argh, is there not a "what is this" command that I could have a switch case on
			if test -d "${currententry}"; then {
				log trace "${entryname}: subdivide directory, creating directory and recursing";
				trymkdir "${currenttarget}/${entryname}";
				handledir "${configdir}" "${targetdir}" "${pathrel}/${entryname}" "${symlinkrel}/..";
				log trace "handling subdir ${entryname} returned, back at \"${pathrel}\" (symlink rel is \"${symlinkrel}\")";
			}; else {
				if test -f "${currententry}"; then {
					# determine if the entry is a blank or a source identifier
					tryread "${currententry}" source
					log trace "source label for entry ${entryname} is \"${source}\"";
					if test -n "$source"; then {
						log trace "trying to creating source link";
						# ... but check the source is valid first (note this is rel. to top-level gen dir)
						if ! checksource "${targetdir}" "${source}"; then {
							fatal "$source was not in source set!";
						}; fi;
						tryln "./${symlinkrel}/${pathname_sourcelinks}/${source}/${pathrel}/${entryname}" "${currenttarget}/${entryname}";
					}; else {
						log trace "making note of blanking entry";
						local ignoredir="${currenttarget}/${pathname_ignore}";
						trymkdirdup "${ignoredir}";
						trytouch "${ignoredir}/${entryname}";
					}; fi;
				}; else {
					log error "unrecognised entity type for config entry ${currententry}";
				}; fi;
			}; fi;
		}; done;
	) || exit $?;

	# now check if there is an autosource entry in place and generate entries as appropriate.
	local autosourcepath="${currentconfig}/${pathname_autosource}";
	if test -e "${autosourcepath}"; then {
		tryread "${autosourcepath}" "autosourceselect";
		log trace "starting autosource generation for directory ${pathrel} from source ${autosourceselect}";
		ls -1aU "${targetdir}/${pathname_sourcelinks}/${autosourceselect}/${pathrel}" | (
			IFS='
';
			while read -r autogenentry; do {
				case "$autogenentry" in
				.)	continue;;
				..)	continue;;
				${pathname_prefix}*)
					continue;;
				esac
				if ! test -e "${currenttarget}/${autogenentry}"; then {
					if ! test -e "${currenttarget}/${pathname_ignore}/${autogenentry}"; then {
						tryln "./${symlinkrel}/${pathname_sourcelinks}/${autosourceselect}/${pathrel}/${autogenentry}" "${currenttarget}/${autogenentry}"
						# log warning "autogen: creating entry for ${autogenentry} under ${pathrel}, stub!";
					}; else {
						log trace "autogen: ${autogenentry} has an ignore record under ${pathrel}, skipping";
					}; fi;
				}; else {
					log trace "autogen: ${autogenentry} already exists at ${pathrel}, skipped";
				}; fi;
			}; done;
		) || exit $?;
	}; fi;

	log trace "-- handling directory ${pathrel} complete";
}

createmasterlinks "$opt_sourcelinkdir" "$opt_targetdir";
handledir "$opt_configdir" "$opt_targetdir" "." "";
